// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, max;
    static int intSize;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
     if(maxLength = 0)
     {
       let str = Array.new(1);  
     }
     else
     {
       let str = Array.new(maxLength);  
     } 
      let max = maxLength;  
      let length = 0; 
      let intSize = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
     do str.dispose();
     do Memory.deAlloc(this);      
     return;
    }

    /** Returns the current length of this string. */
    method int length() {
     return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
     if(j < length)
      {
       let str[j] = c;
      }
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
       
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let str[length - 1] = null;
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, val, d;
      let val = 0;
      while(i < length)
      {
        let d = str[i] - 48; // char code to int value
        if((d > -1) & (d < 10))
        {
         let val = Math.multiply(val, 10) + d;
        }
        let i = i + 1;
      }
      
      if(str[0] = 45)
      {
       let val = - val;
      }
      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int i, index;
      let index = max - 1;
      let intSize = 0;
      if(val > 0)
       {
          do String.int2String(val, index, str);
           let length = intSize;
       }
       else
       {
         do String.int2String(-val, index + 1, str);
         let str[0] = 45; // - 
         let length = intSize + 1;
       }
       let intSize = 0;
       return;
    }
    
    
    function void int2String(int val, int i, Array intStr)
    {
      var int num, product, lastDigit, c, i;
      let num = Math.divide(val, 10);
      let lastDigit = val - Math.multiply(10, num);
      let c = lastDigit + 48;
      
      if(val < 10)
      {
        let intStr[i - 1] = c;
        let intSize = intSize + 1;   
      }
      else
      {        
         do String.int2String(num, i - 1, intStr);
         let intStr[i - 1] = c;
         let intSize = intSize + 1; 
      } 
      
      return;     
    }


    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {   
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
