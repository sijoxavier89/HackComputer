// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

     static Array twoToThe;
     static int size, sqrtRange, value2qy;
     
    /** Initializes the library. */
    function void init() {

     let size = 15;
     let sqrtRange = 7; // size/2 - 1
     
    // create static array for power of 2
     let twoToThe = Array.new(16);
     let twoToThe[0] = 1;
     let twoToThe[1] = 2;
     let twoToThe[2] = 4;
     let twoToThe[3] = 8;
     let twoToThe[4] = 16;
     let twoToThe[5] = 32;
     let twoToThe[6] = 64;
     let twoToThe[7] = 128;
     let twoToThe[8] = 256;
     let twoToThe[9] = 512;
     let twoToThe[10] = 1024;
     let twoToThe[11] = 2048;
     let twoToThe[12] = 4096;
     let twoToThe[13] =  8192;
     let twoToThe[14] =  16384;
     let twoToThe[15] = -1;	
     
     return;	
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    
      if(x < 0)
      {
        return -x; 
      }
      else
      {
       return x;
      }
      
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
     var int sum, shiftedX, i;
      
     // special case either x or y 1 or 0
        if((x = 0) | (y = 0))
        {
          return 0;
        }
      
       if((x = 1) | (y = 1))
       {
         if(x = 1)
         {
           return y;
         }
         return x;
       }
     
      let sum = 0;
      let shiftedX = x;

      while(i < size)
      {
         if(Math.bit(y, i)) 
         {
           let sum = sum + shiftedX;
           
         }

        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;     
      }
      return sum;
     
    }
    
     function bool bit(int x, int i)
     {
       var int xandy,twoToi; 
       let xandy = x & twoToThe[i];
       let twoToi = twoToThe[i];

       if(xandy = twoToi)
         {
           return true;
         }
         else
         {
           return false;
         }
     }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
     var int absX,absY, result;
    
      let absX = Math.abs(x);
      let absY = Math.abs(y);
      

      let result = Math.divideInternal(absX, absY);
      
      if(((x < 0) & (y < 0)) | ((x > 0) & (y > 0)))
      {
        return result;
      }
      else
      {
        return -result;
      }
      
    }
    
    function int divideInternal(int x, int y) {
     var int q,doubleY;
      
     let value2qy = 0; 
     if((x < y) | (y < 0))
      {
        return 0;
      }

      let q = Math.divideInternal(x, y+y);
      let doubleY = y+y;
      if((x - value2qy) < y)
      {       
        return q+q;
      }
      else
      {
        let value2qy = value2qy + y;
        return q+q+1;
      }
      
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    
     var int n,y,j,temp,pow;
     let y = 0;
     let j = sqrtRange;

     while(j > -1)
     {
        let pow = twoToThe[j]+y; // y+2^j
        let temp = Math.multiply(pow,pow); // (y+2^j)^2
        
        if(((temp < x) | (temp = x)) & (temp > 0))
         {
           let y = pow;
         }
       let j = j - 1;
     }
     
     return y;
     
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
     
     if(a > b)
     {
      return a;
     }
     else
     {
       return b;
     }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
     
     if(a < b)
     {
      return a;
     }
     else
     {
       return b;
     }
    }
}
